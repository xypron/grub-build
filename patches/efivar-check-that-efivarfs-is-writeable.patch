From ea53f0fdbbc5f4b9b324682eb0a9f2bafbfbdd31 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <heinrich.schuchardt@canonical.com>
Date: Fri, 18 Mar 2022 15:21:33 +0100
Subject: [PATCH] efivar: check that efivarfs is writeable

Some UEFI implementations (notably U-Boot) don't implement the
SetVariable() runtime service. On these systems the GRUB installation
must be completed manually. Write a warning in this case but avoid
throwing an error.

Signed-off-by: Heinrich Schuchardt <heinrich.schuchardt@canonical.com>
---
 grub-core/osdep/unix/efivar.c | 56 +++++++++++++++++++++++++++++++++++
 1 file changed, 56 insertions(+)

--- a/grub-core/osdep/unix/efivar.c
+++ b/grub-core/osdep/unix/efivar.c
@@ -511,6 +511,60 @@
   return false;
 }
 
+static bool
+efivar_is_rw (void)
+{
+  const char filename[] = "/proc/self/mounts";
+  int fd;
+  grub_uint64_t size;
+  char *data = NULL, *start, *end, *pos;
+  bool ret = false;
+
+  fd = grub_util_fd_open (filename, GRUB_UTIL_FD_O_RDONLY);
+  if (fd == -1)
+    {
+      grub_error (GRUB_ERR_BAD_DEVICE, N_ ("cannot open `%s': %s"), filename,
+                  strerror (errno));
+      return 0;
+    }
+
+  size = grub_util_get_fd_size (fd, filename, NULL);
+  if (size == (grub_uint64_t)-1LL)
+    {
+      grub_error (GRUB_ERR_BAD_DEVICE, N_ ("cannot stat `%s': %s"), filename,
+                  strerror (errno));
+    }
+  if (size > GRUB_ULONG_MAX - 1)
+    {
+      goto out;
+    }
+
+  data = xmalloc (size + 1);
+  if (!data)
+    {
+      goto out;
+    }
+
+  if (grub_util_fd_read (fd, data, size) < 0)
+    {
+      grub_error (GRUB_ERR_BAD_DEVICE, N_ ("cannot read `%s': %s"), filename,
+                  strerror (errno));
+      goto out;
+    }
+  grub_util_fd_close (fd);
+
+  data[size] = 0;
+  start = grub_strstr (data, "efivarfs ");
+  end = grub_strstr (start, "\n");
+  pos = grub_strstr (start, " rw,");
+  if (pos && pos < end)
+    ret = true;
+
+out:
+  grub_free (data);
+  return ret;
+}
+
 int
 grub_install_efivar_register_efi (grub_device_t efidir_grub_dev,
 				  const char *efidir, const char *efifile_path,
@@ -528,6 +582,14 @@
   int rc;
   bool is_boot_efi;
 
+  /* Check if EFI variable can be written */
+  if (!efivar_is_rw ())
+    {
+      grub_util_warn ("EFI variables cannot be set on this system");
+      grub_util_warn ("You will have to complete the GRUB setup manually");
+      return 0;
+    }
+
   is_boot_efi = strstr (efidir, "/boot/efi") != NULL;
   efidir_disk = grub_util_biosdisk_get_osdev (efidir_grub_dev->disk);
   efidir_part = efidir_grub_dev->disk->partition ? efidir_grub_dev->disk->partition->number + 1 : 1;
